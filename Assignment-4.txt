                                                                                                      Assignment-4

1.Pull an  from docker hub and run it in docker playground.

name: Docker Image CI
on:
  pull:
    branches: [ master ]
jobs:
build:
    runs-on: ubuntu-latest
steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
run: |
      echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin docker.io
      docker build . --file Dockerfile --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:$GITHUB_SHA
      docker push docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:$GITHUB_SHA
$ docker run davelms/hello-world:8517bf9c40f4cf198ea3313bd5ec3cc43176bd85     
Unable to find image 'davelms/hello-world:8517bf9c40f4cf198ea3313bd5ec3cc43176bd85' locally
8517bf9c40f4cf198ea3313bd5ec3cc43176bd85: Pulling from davelms/hello-world
d9cbbca60e5f: Already exists
Digest: sha256:f8808c8b2ae19f6f3700e51a127e04d8366a1285bdfc6e4006092807f0eced1b
Status: Downloaded newer image for davelms/hello-world:8517bf9c40f4cf198ea3313bd5ec3cc43176bd85
Hello Dave!

2.Create a docker file for the jobportal application and deploy it in docker desktop application.

# syntax=docker/dockerfile:1
FROM node:12-alpine
RUN apk add --no-cache python2 g++ make
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "src/index.js"]
EXPOSE 3000
docker build -t getting-started
docker run -dp 3000:3000 getting-started
 <p className="text-center">No items yet! Add one above!</p>
                 <p className="text-center">You have no todo items yet! Add one above!</p>
docker ps
Swap out <the-container-id> with the ID from docker ps
 docker stop <the-container-id>
docker rm <the-container-id>
 $ docker push docker/getting-started
 The push refers to repository [docker.io/docker/getting-started]
 An image does not exist locally with the tag: docker/getting-started
docker tag getting-started YOUR-USER-NAME/getting-started
docker push YOUR-USER-NAME/getting-started
docker run -dp 3000:3000 YOUR-USER-NAME/getting-started

3.Create a IBM container registry and deploy helloworld app  or jobportal app.

ibmcloud login
ibmcloud cr namespace-add <my_namespace>
ibmcloud cr namespace-list -v
docker pull <source_image>:<tag>
docker pull hello-world:latest
podman pull <source_image>:<tag>
podman pull hello-world:latest
docker tag <source_image>:<tag> 
<region>.icr.io/<my_namespace>/<new_image_repo>:<new_tag>
docker tag hello-world:latest uk.icr.io/namespace1/hw_repo:1
podman tag <source_image>:<tag>
 <region>.icr.io/<my_namespace>/<new_image_repo>:<new_tag>
podman tag hello-world:latest uk.icr.io/namespace1/hw_repo:1
ibmcloud cr login --client docker
ibmcloud cr login --client podman
docker push <region>.icr.io/<my_namespace>/<image_repo>:<tag>
docker push uk.icr.io/namespace1/hw_repo:1
podman push <region>.icr.io/<my_namespace>/<image_repo>:<tag>
podman push uk.icr.io/namespace1/hw_repo:1
ibmcloud cr image-list

4.Create a kubernetes cluster in IBM cloud and deploy helloworld image or jobportal image and also expose the same app to run in nodeport.

kubectl create namespace project-a
kubectl config set-context --current --namespace=project-a
git clone https://github.com/IBM/container-service-getting-started-wt.git
cd "container-service-getting-started-wt/Lab 1"
ibmcloud cr build -t us.icr.io/tn_namespace/hello-world:1 .
kubectl get secret all-icr-io -n default -o yaml | sed 's/default/project-a/g' | kubectl create -n project-a -f -
$ kubectl get secrets
NAME                  TYPE                                  DATA   AGE
project-a-us-icr-io   kubernetes.io/dockerconfigjson        1      10s
kubectl create deployment hello-world-deployment --image=us.icr.io/tn_namespace/hello-world:1
deployment.apps/hello-world-deployment created
kubectl get deployment hello-world-deployment
NAME                     READY   UP-TO-DATE   AVAILABLE   AGE
hello-world-deployment   1/1     1            1           1m5s
$ kubectl get pods
NAME                                     READY   STATUS    RESTARTS   AGE
hello-world-deployment-56999cc7cf-fk6ph   1/1     Running   0          1m50s
kubectl expose deploy hello-world-deployment --name hello-world-svc --port 8080
service/my-app-svc exposed
$ kubectl get services
NAME              TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
hello-world-svc   ClusterIP   172.21.82.31   <none>        8080/TCP   7s
$ kubectl describe service hello-world-svc
Name:              hello-world-svc
Namespace:         project-a
Labels:            app=hello-world-deployment
Annotations:       <none>
Selector:          app=hello-world-deployment
Type:              ClusterIP
IP:                172.21.82.31
Port:              <unset>  8080/TCP
TargetPort:        8080/TCP
Endpoints:         172.30.233.41:8080,172.30.233.42:8080,172.30.233.43:8080
Session Affinity:  None
Events:            <none>
ibmcloud ks cluster get --cluster tncluster  | grep Ingress
Ingress Subdomain:              tncluster-5be51ad3139a99d89cdf8f97c78ef71c-0000.us-south.containers.appdomain.cloud   
Ingress Secret:                 tncluster-5be51ad3139a99d89cdf8f97c78ef71c-0000   
$ cat myingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myingress
  annotations:
    kubernetes.io/ingress.class: "public-iks-k8s-nginx"
spec:
  rules:
  - host: subdomain1.mycluster-fra04-b3-157851-5be51ad3139a99d89cdf8f97c78ef71c-0000.eu-de.containers.appdomain.cloud
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hello-world-svc
            port:
              number: 8080
$ kubectl describe ingress myingress
...
Rules:
  Host                                                                                            Path  Backends
  ----                                                                                            ----  --------
  subdomain1.tncluster-5be51ad3139a99d89cdf8f97c78ef71c-0000.us-south.containers.appdomain.cloud  
                                                                                                  /   hello-world-svc:8080 (172.30.233.41:8080,172.30.233.42:8080,172.30.233.43:8080)
...
Events:
  Type    Reason   Age   From                                                 Message
  ----    ------   ----  ----                                                 -------
  Normal  Success  51s   public-crbsps9s2d08ovk65207gg-alb1-56c8bc6f8d-7bkpt  Successfully applied ingress resource
curl https://<your custom domain>/<app_path>
Hello world from hello-world-deployment-56999cc7cf-vsr2q! Your app is up and running in a cluster!
kubectl get all -l app=hello-world-deployment -n project-a
kubectl delete all -l app=hello-world-deployment-n project-a
  pod "hello-world-deployment-56999cc7cf-vsr2q" deleted
  service "hello-world-service" deleted
  deployment.apps "hello-world-deployment" deleted
kubectl delete ingress myingress
ingress.extensions "myingress" deleted
$ kubectl delete namespace project-a
namespace "project-a" deleted






















































